import threading
import random
from threading import Lock, Thread
from time import sleep
from random import randint


class Bank:
    def __init__(self):
        self.balance = 0
        self.lock = Lock()

    def deposit(self):
      with self.lock:
        for i in range(100):
          amount = random.randint(50, 500)
          self.balance += amount
          print(f"Пополнение ${amount}. Баланс: ${self.balance}")
          sleep(0.01)

    def take(self):
      for i in range(100):
        amount = random.randint(50, 500)
        print(f"Запрос на ${amount}")
        if amount > self.balance:
            print("Недостаточно средств")
        else:
            self.balance -= amount
            print(f"Снятие ${amount}. Баланс: ${self.balance}")
        sleep(0.01)

    
bk = Bank()

# Т.к. методы принимают self, в потоки нужно передать сам объект класса Bank
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

th1.start()
th2.start()
th1.join()
th2.join()

print(f'Итоговый баланс: {bk.balance}')
